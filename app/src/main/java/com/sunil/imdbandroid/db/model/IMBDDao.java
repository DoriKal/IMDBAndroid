package com.sunil.imdbandroid.db.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMBD".
*/
public class IMBDDao extends AbstractDao<IMBD, Long> {

    public static final String TABLENAME = "IMBD";

    /**
     * Properties of entity IMBD.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Movie_id = new Property(1, int.class, "movie_id", false, "MOVIE_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Yearofrelease = new Property(3, Integer.class, "yearofrelease", false, "YEAROFRELEASE");
        public final static Property Rating = new Property(4, Double.class, "rating", false, "RATING");
        public final static Property Imageurl = new Property(5, String.class, "imageurl", false, "IMAGEURL");
        public final static Property DetailLink = new Property(6, String.class, "detailLink", false, "DETAIL_LINK");
    }


    public IMBDDao(DaoConfig config) {
        super(config);
    }
    
    public IMBDDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMBD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MOVIE_ID\" INTEGER NOT NULL ," + // 1: movie_id
                "\"NAME\" TEXT," + // 2: name
                "\"YEAROFRELEASE\" INTEGER," + // 3: yearofrelease
                "\"RATING\" REAL," + // 4: rating
                "\"IMAGEURL\" TEXT," + // 5: imageurl
                "\"DETAIL_LINK\" TEXT);"); // 6: detailLink
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMBD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IMBD entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMovie_id());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        Integer yearofrelease = entity.getYearofrelease();
        if (yearofrelease != null) {
            stmt.bindLong(4, yearofrelease);
        }
 
        Double rating = entity.getRating();
        if (rating != null) {
            stmt.bindDouble(5, rating);
        }
 
        String imageurl = entity.getImageurl();
        if (imageurl != null) {
            stmt.bindString(6, imageurl);
        }
 
        String detailLink = entity.getDetailLink();
        if (detailLink != null) {
            stmt.bindString(7, detailLink);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IMBD entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMovie_id());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        Integer yearofrelease = entity.getYearofrelease();
        if (yearofrelease != null) {
            stmt.bindLong(4, yearofrelease);
        }
 
        Double rating = entity.getRating();
        if (rating != null) {
            stmt.bindDouble(5, rating);
        }
 
        String imageurl = entity.getImageurl();
        if (imageurl != null) {
            stmt.bindString(6, imageurl);
        }
 
        String detailLink = entity.getDetailLink();
        if (detailLink != null) {
            stmt.bindString(7, detailLink);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public IMBD readEntity(Cursor cursor, int offset) {
        IMBD entity = new IMBD( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // movie_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // yearofrelease
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // rating
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // imageurl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // detailLink
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IMBD entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMovie_id(cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setYearofrelease(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setRating(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setImageurl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDetailLink(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IMBD entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IMBD entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IMBD entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
